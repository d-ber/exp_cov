<launch>

    ### ASTRA DRIVER (from pkg astra_launch) ###
    <!-- "camera" should uniquely identify the device. All topics are pushed down
         into the "camera" namespace, and it is prepended to tf frame ids. -->
    <arg name="camera" default="camera" />
    <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
    <arg name="depth_frame_id" default="$(arg camera)_depth_optical_frame" />
  
    <!-- device_id can have the following formats:
           "#n"            : the nth device found, starts from 1
           "2@n"           : the nth device on USB bus 2, n starts from 1
           "2bc5/0401@1/6" : uri in format <vendor ID>/<product ID>@<bus number>/<device number>
           "15120410023"   : serial number -->
    <arg name="device_id" default="#1" />
    <arg name="bootorder" default="0" />
    <arg name="devnums" default="1" />
  
    <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
         where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
         See camera_info_manager docs for calibration URL details. -->
    <arg name="rgb_camera_info_url"   default="" />
    <arg name="depth_camera_info_url" default="" />
  
    <!-- Hardware depth registration -->
    <arg name="depth_registration" default="true" />
  
    <!-- Driver parameters -->
    <arg name="color_depth_synchronization"     default="false" />
    <arg name="auto_exposure"                   default="true" />
    <arg name="auto_white_balance"              default="true" />
    # Set camera resolution
    # To change camera resolution, see the astra_camera/cfg/Astra.cfg (requires catkin_make)
    
    <!-- Arguments for remapping all device namespaces -->
    <arg name="rgb"              default="rgb" />
    <arg name="ir"               default="ir" />
    <arg name="depth"            default="depth" />
  
    <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
         tree. Useful if you are playing back recorded raw data from a bag, or are
         supplying a more accurate tf tree from calibration. -->
    <arg name="load_driver" default="false" />
    <arg name="publish_tf" default="true" />
    <!-- Processing Modules -->
    <arg name="rgb_processing"                  default="true"  />
    <arg name="debayer_processing"              default="false" />
    <arg name="ir_processing"                   default="false" />
    <arg name="depth_processing"                default="true" />
    <arg name="depth_registered_processing"     default="true" />
    <arg name="disparity_processing"            default="false" />
    <arg name="disparity_registered_processing" default="false" />
    <arg name="hw_registered_processing"        default="true" if="$(arg depth_registration)" />
    <arg name="sw_registered_processing"        default="false" if="$(arg depth_registration)" />
    <arg name="hw_registered_processing"        default="false" unless="$(arg depth_registration)" />
    <arg name="sw_registered_processing"        default="true" unless="$(arg depth_registration)" />
  
    <!-- Disable bond topics by default -->
    <arg name="respawn" default="false" />
  
    <!-- Worker threads for the nodelet manager -->
    <arg name="num_worker_threads" default="4" />
  
    <!-- Push down all topics/nodelets into "camera" namespace -->
    <group ns="$(arg camera)">

        <!-- Start nodelet manager -->
        <arg name="manager" value="$(arg camera)_nodelet_manager" />
        <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
        <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name" value="$(arg manager)" />
            <arg name="debug" value="$(arg debug)" />
            <arg name="num_worker_threads" value="$(arg num_worker_threads)" />
        </include>

        <!-- Load standard constellation of processing nodelets -->
        <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
            <arg name="manager" value="$(arg manager)" />
            <arg name="rgb" value="$(arg rgb)" />
            <arg name="ir" value="$(arg ir)" />
            <arg name="depth" value="$(arg depth)" />
            <arg name="respawn" value="$(arg respawn)" />
            <arg name="rgb_processing" value="$(arg rgb_processing)" />
            <arg name="debayer_processing" value="$(arg debayer_processing)" />
            <arg name="ir_processing" value="$(arg ir_processing)" />
            <arg name="depth_processing" value="$(arg depth_processing)" />
            <arg name="depth_registered_processing" value="$(arg depth_registered_processing)" />
            <arg name="disparity_processing" value="$(arg disparity_processing)" />
            <arg name="disparity_registered_processing"
                value="$(arg disparity_registered_processing)" />
            <arg name="hw_registered_processing" value="$(arg hw_registered_processing)" />
            <arg name="sw_registered_processing" value="$(arg sw_registered_processing)" />
        </include>

    </group> <!--camera -->

    ### NODELET_MANAGER ###
    <node pkg="nodelet" type="nodelet" name="$(arg camera)_nodelet_manager" output="screen" respawn="false" args="manager">
    </node>

    <node pkg="nodelet" type="nodelet" name="$(arg camera)_pointcloud_to_laserscan" 
        args="load pointcloud_to_laserscan/pointcloud_to_laserscan_nodelet $(arg camera)_nodelet_manager">

        <remap from="cloud_in" to="/depth/points"/>
        <remap from="scan" to="scan"/>
	    <param name="target_frame" value="base_link" />                # Leave "" to output scan in pointcloud frame "$(arg camera)_link"
        <rosparam>
            transform_tolerance: 0.01
            min_height: 0.05
            max_height: 0.40

            angle_min: -1.5708              # -M_PI/2
            angle_max: 1.5708               # M_PI/2
            angle_increment: 0.0087         # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.26
            range_max: 8.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing, thread number governed by nodelet manager
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
    </node>
</launch>